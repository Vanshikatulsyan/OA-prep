#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
/*vector<int> preprocessDivisors(int maxElement)
{
    vector<int> divisors(maxElement + 1, 0);
    for (int i = 1; i <= maxElement; ++i)
    {
        for (int j = i; j <= maxElement; j += i)
        {
            divisors[j]++;
        }
    }
    return divisors;
}*/

// Function to solve the problem
int maxDivisors(const vector<int> &arr)
{
    int maxElement = *max_element(arr.begin(), arr.end());
    // vector<int> divisors = preprocessDivisors(maxElement);

    unordered_map<int, int> freq;
    for (int num : arr)
    {
        freq[num]++;
    }

    vector<int> result;
    for (int num : arr)
    {
        int maxDiv = 0;
        for (int i = 1; i <= maxElement; ++i)
        {
            if (num % i == 0 && freq.find(i) != freq.end())
            {
                maxDiv += freq[i];
            }
        }
        result.push_back(maxDiv);
    }
    int ans = 0;
    for (int i = 0; i < result.size(); i++)
        ans = max(ans, result[i]);
    return ans;
}

void solve()
{
    ll ins_c, val, n;
    cin >> ins_c >> val >> n;
    ll time = ins_c * val;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];

    ll maxDiv = (ll)maxDivisors(a) * 100000;

    if (time >= maxDiv)
        cout << 1 << " " << maxDiv << endl;
    else
        cout << 0 << " " << maxDiv << endl;
}

int main()
{
    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
